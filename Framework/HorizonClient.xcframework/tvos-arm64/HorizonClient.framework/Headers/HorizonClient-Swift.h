#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 effective-4.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef HORIZONCLIENT_SWIFT_H
#define HORIZONCLIENT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HorizonClient",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS("_TtC13HorizonClient5Event")
@interface Event : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull schemaId;
@property (nonatomic, readonly, copy) NSString * _Nonnull schemaVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
@property (nonatomic, readonly) id _Nonnull url;
@property (nonatomic, readonly) id _Nonnull referer;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull properties;
@property (nonatomic, readonly, copy) NSString * _Nullable relationId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSCoder;

SWIFT_CLASS("_TtC13HorizonClient18HorizonClientError")
@interface HorizonClientError : NSError
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13HorizonClient19EventNotQueuedError")
@interface EventNotQueuedError : HorizonClientError
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end

enum GLBHorizonEnvironment : NSInteger;
enum GLBUserTokenType : NSInteger;

/// A client for Horizon that sends signals according to a JSON Schema format.
/// When the app is in foreground, signals are sent in batches automaticcaly at intervals.
/// To enable sending signals in background, the “Background fetch” capability should be enabled for the app and the <code>HorizonClient</code>’s method <code>performFetch(with:)</code> should be called manually from your <code>UIApplicationDelegate</code>‘s <code>application(_:performFetchWithCompletionHandler:)</code> method. Don’t forget to also set the minimum background fetch interval for your application by calling your <code>UIApplication</code>’s <code>setMinimumBackgroundFetchInterval(_:)</code> method.
SWIFT_CLASS_NAMED("HorizonClient")
@interface GLBHorizonClient : NSObject
/// Returns the shared instance of Horizon Client.
/// \param readyCallback Callback called when Horizon Client is ready to use.
///
///
/// throws:
/// <code>HorizonClientNotConfiguredError</code> if the client was not configured yet. Call <code>useSettings</code> to configure it.
///
/// returns:
/// The shared instance of <code>HorizonClient</code>. This instance will be the same for every call of this method.
+ (GLBHorizonClient * _Nullable)getAndReturnError:(NSError * _Nullable * _Nullable)error readyCallback:(void (^ _Nullable)(HorizonClientError * _Nullable))readyCallback SWIFT_WARN_UNUSED_RESULT;
/// Configures Horizon Client. It should be called on the initialization of the app.
/// \param tenant The client group identifier.
///
/// \param horizonEnvironment Destination of Horizon Client requests.
///
+ (void)useSettingsWithTenant:(NSString * _Nonnull)tenant horizonEnvironment:(enum GLBHorizonEnvironment)horizonEnvironment advertisingId:(NSString * _Nullable)advertisingId;
/// Set a Logged user to be tracked.
/// \param tokenType Authentication token type. E.g. GLBID, GST
///
/// \param token Authentication token value.
///
///
/// throws:
/// <code>HorizonClientNotConfiguredError</code> if the client was not configured yet. Call <code>useSettings</code> to configure it.
+ (BOOL)setLoggedUserWithTokenType:(enum GLBUserTokenType)tokenType token:(NSString * _Nonnull)token error:(NSError * _Nullable * _Nullable)error;
/// Removes the tracking of logged users, if there is one.
///
/// throws:
/// <code>HorizonClientNotConfiguredError</code> if the client was not configured yet. Call <code>useSettings</code> to configure it.
+ (BOOL)removeLoggedUserAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Return anonymous users, if there is one.
/// \param callbackUser A callback with 2 Strings and a Nullable String, which manipulates type, value and publicValue. If there’s no anonymous user, it returns <code>("","",nil)</code>.
///
///
/// throws:
/// <code>HorizonClientNotConfiguredError</code> if the client was not configured yet. Call <code>useSettings</code> to configure it.
- (BOOL)getAnonymousUserAndReturnError:(NSError * _Nullable * _Nullable)error callbackUser:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, NSString * _Nullable))callbackUser;
/// Return hsid user token , if there is one.
/// \param callbackUserHsid A callback with a string. If user there is, it returns <code>("")</code>.
///
///
/// throws:
/// <code>HorizonClientNotConfiguredError</code> if the client was not configured yet. Call <code>useSettings</code> to configure it.
- (BOOL)getHsidAndReturnError:(NSError * _Nullable * _Nullable)error callbackHsid:(void (^ _Nonnull)(NSString * _Nonnull))callbackHsid;
/// Enqueues an event to be sent to Horizon Track Service.
/// First it validates the event structure with a given <code>schemaId</code> and <code>schemaVersion</code>. If it’s not valid it will be logged and discarded. Otherwise it’ll be enqueued in the <code>EventBus</code>.
/// \param schemaId The schema identification.
///
/// \param schemaVersion The schema version.
///
/// \param contentType The type of content/component that generated this action. E.g. multi-content, player.
///
/// \param url The url of the tracked component, e.g. an <code>UIViewController</code>.
///
/// \param referer The url of the previous component that led to the current one.
///
/// \param properties The signal properties, according to its schema.
///
/// \param relationId An identifier to bond with the event.
///
/// \param handler Callback informing if the event was successfully queued. In case of any error a <code>EventError</code> will be returned with the cause.
///
///
/// returns:
/// An unique identifier bound with the event.
- (void)sendWithSchemaId:(NSString * _Nonnull)schemaId schemaVersion:(NSString * _Nonnull)schemaVersion contentType:(NSString * _Nonnull)contentType url:(id _Nonnull)url referer:(id _Nonnull)referer properties:(NSDictionary<NSString *, id> * _Nonnull)properties relationId:(NSString * _Nullable)relationId handler:(void (^ _Nonnull)(Event * _Nonnull, HorizonClientError * _Nullable))handler;
/// Utilitary method that create a Event structure.
/// \param schemaId The schema identification.
///
/// \param schemaVersion The schema version.
///
/// \param contentType The type of content/component that generated this action. E.g. multi-content, player.
///
/// \param url The url of the tracked component, e.g. an <code>UIViewController</code>.
///
/// \param referer The url of the previous component that led to the current one.
///
/// \param properties The signal properties, according to its schema.
///
/// \param relationId An identifier to bond with the event.
///
///
/// returns:
/// An Event that wraps all data passed as param.
+ (Event * _Nonnull)createEventWithSchemaId:(NSString * _Nonnull)schemaId schemaVersion:(NSString * _Nonnull)schemaVersion contentType:(NSString * _Nonnull)contentType url:(id _Nonnull)url referer:(id _Nonnull)referer properties:(NSDictionary<NSString *, id> * _Nonnull)properties relationId:(NSString * _Nullable)relationId SWIFT_WARN_UNUSED_RESULT;
/// Enqueues an list of events to be sent to Horizon Track Service.
/// First it validates all events structure with a given <code>schemaId</code> and <code>schemaVersion</code>. If it’s not valid it will be logged and discarded.
/// \param events A list of <code>Event</code>.
///
/// \param relationId An identifier to bond with all the events.
///
/// \param handler Callback informing if an event was successfully queued. In case of any error a <code>EventError</code> will be returned with the cause. For each event in events list  the handler will be called.
///
///
/// returns:
/// An unique identifier to be  bound with all the events.
- (void)sendWithEvents:(NSArray<Event *> * _Nonnull)events relationId:(NSString * _Nullable)relationId handler:(void (^ _Nonnull)(Event * _Nonnull, HorizonClientError * _Nullable))handler;
/// Sends enqueued signals when the app is in background state.
/// \param completionHandler The completionHandler provided to the <code>AppDelegate</code>’s <code>application(_:performFetchWithCompletionHandler:)</code> method.
///
- (void)performFetchWith:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC13HorizonClient32HorizonClientNotInitializedError")
@interface HorizonClientNotInitializedError : HorizonClientError
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC13HorizonClient21HorizonClientNotReady")
@interface HorizonClientNotReady : HorizonClientError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, GLBHorizonEnvironment, "HorizonEnvironment", open) {
  GLBHorizonEnvironmentProd = 0,
  GLBHorizonEnvironmentQa = 1,
};


SWIFT_CLASS("_TtC13HorizonClient34InvalidDataForSpecifiedSchemaError")
@interface InvalidDataForSpecifiedSchemaError : HorizonClientError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC13HorizonClient26SchemasInitializationError")
@interface SchemasInitializationError : HorizonClientError
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC13HorizonClient12UnknownError")
@interface UnknownError : HorizonClientError
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, GLBUserTokenType, "UserTokenType", open) {
  GLBUserTokenTypeGlbid = 0,
  GLBUserTokenTypeGst = 1,
};

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
