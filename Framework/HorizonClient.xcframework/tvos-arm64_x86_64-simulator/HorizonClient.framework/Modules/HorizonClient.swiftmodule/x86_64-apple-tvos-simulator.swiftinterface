// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 effective-4.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-tvos16.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name HorizonClient
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import HorizonClient
import Swift
import _Concurrency
import _StringProcessing
@objc(GLBUserTokenType) public enum UserTokenType : Swift.Int {
  case glbid
  case gst
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(GLBHorizonEnvironment) public enum HorizonEnvironment : Swift.Int {
  case prod
  case qa
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ValidationResult {
  case valid
  case invalid([Swift.String])
  public var valid: Swift.Bool {
    get
  }
  public var errors: [Swift.String]? {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(GLBHorizonClient) public class HorizonClient : ObjectiveC.NSObject {
  public static var isReady: Swift.Bool
  @objc public static func get(readyCallback: ((HorizonClientError?) -> Swift.Void)? = nil) throws -> HorizonClient
  @objc public static func useSettings(tenant: Swift.String, horizonEnvironment: HorizonEnvironment, advertisingId: Swift.String? = nil)
  @objc public static func setLoggedUser(tokenType: UserTokenType, token: Swift.String) throws
  @objc public static func removeLoggedUser() throws
  @objc public func getAnonymousUser(callbackUser: @escaping (Swift.String, Swift.String, Swift.String?) -> Swift.Void) throws
  @objc public func getHsid(callbackHsid: @escaping (Swift.String) -> Swift.Void) throws
  @objc public func send(schemaId: Swift.String, schemaVersion: Swift.String, contentType: Swift.String, url: Any, referer: Any = "", properties: [Swift.String : Any], relationId: Swift.String? = nil, handler: @escaping (Event, HorizonClientError?) -> Swift.Void)
  @objc public static func createEvent(schemaId: Swift.String, schemaVersion: Swift.String, contentType: Swift.String, url: Any, referer: Any = "", properties: [Swift.String : Any], relationId: Swift.String? = nil) -> Event
  @objc public func send(events: Swift.Array<Event>, relationId: Swift.String? = nil, handler: @escaping (Event, HorizonClientError?) -> Swift.Void)
  @objc public func performFetch(with completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  public func setAdvertisingId(advertisingIdentifier: Swift.String)
  public func removeAdvertisingId()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Event : ObjectiveC.NSObject {
  @objc final public let schemaId: Swift.String
  @objc final public let schemaVersion: Swift.String
  @objc final public let contentType: Swift.String
  @objc final public let url: Any
  @objc final public let referer: Any
  @objc final public let properties: [Swift.String : Any]
  @objc final public let relationId: Swift.String?
  @objc deinit
}
public struct Token {
}
extension Token : Swift.Equatable {
}
public func == (lt: Token, rt: Token) -> Swift.Bool
@_inheritsConvenienceInitializers @objc public class HorizonClientError : Foundation.NSError {
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class HorizonClientNotInitializedError : HorizonClientError {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class HorizonClientNotReady : HorizonClientError {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class InvalidDataForSpecifiedSchemaError : HorizonClientError {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class UnknownError : HorizonClientError {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class EventNotQueuedError : HorizonClientError {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class SchemasInitializationError : HorizonClientError {
  @objc deinit
}
public enum Type : Swift.String {
  case Object
  case Array
  case String
  case Integer
  case Number
  case Boolean
  case Null
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Schema {
  public let title: Swift.String?
  public let description: Swift.String?
  public let type: [`Type`]?
  public init(_ schema: [Swift.String : Any])
  public func validate(_ data: Any) -> ValidationResult
}
public func validate(_ value: Any, schema: [Swift.String : Any]) -> ValidationResult
public struct HorizonClientNotConfiguredError : Swift.Error {
}
extension UserTokenType : Swift.Equatable {}
extension UserTokenType : Swift.Hashable {}
extension UserTokenType : Swift.RawRepresentable {}
extension HorizonEnvironment : Swift.Equatable {}
extension HorizonEnvironment : Swift.Hashable {}
extension HorizonEnvironment : Swift.RawRepresentable {}
extension `Type` : Swift.Equatable {}
extension `Type` : Swift.Hashable {}
extension `Type` : Swift.RawRepresentable {}
